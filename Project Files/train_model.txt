from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

# Correct path to dataset (no extra quotes and OS-safe)
dataset_path = dataset_path = "C:\\synergy\\gagan\\Rice_Image_Dataset"


# Image data generators
train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    validation_split=0.2  # 80% training, 20% validation
)

# Training data
train = train_datagen.flow_from_directory(
    dataset_path,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

# Validation data
val = train_datagen.flow_from_directory(
    dataset_path,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Model architecture
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    MaxPooling2D(),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(train.num_classes, activation='softmax')  # automatically detects number of classes
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(train, validation_data=val, epochs=10)

# Save the trained model
model.save('rice_model.h5')

print("âœ… Model training complete and saved as 'rice_model.h5'")